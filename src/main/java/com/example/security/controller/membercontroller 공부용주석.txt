package com.example.security.controller;
// 이 클래스가 속한 패키지를 정의합니다.

import com.example.security.entity.Member;
// Member 엔티티 클래스를 가져옵니다. 회원 정보를 담는 객체입니다.
import com.example.security.service.MemberService;
// MemberService 인터페이스 또는 클래스를 가져옵니다. 회원 관련 비즈니스 로직을 처리합니다.
import lombok.RequiredArgsConstructor;
// Lombok 라이브러리의 어노테이션으로, final 필드에 대한 생성자를 자동으로 생성합니다.
import org.springframework.stereotype.Controller;
// 이 클래스가 Spring MVC의 컨트롤러임을 나타냅니다.
import org.springframework.web.bind.annotation.GetMapping;
// HTTP GET 요청을 특정 메소드에 매핑합니다.
import org.springframework.web.bind.annotation.PostMapping;
// HTTP POST 요청을 특정 메소드에 매핑합니다.
// import org.springframework.web.bind.annotation.RequestMapping;
// 특정 경로의 요청을 클래스 또는 메소드에 매핑합니다.


@Controller
// 이 클래스가 웹 요청을 처리하는 Spring MVC 컨트롤러임을 선언합니다.
@RequiredArgsConstructor
// final로 선언된 필드(여기서는 memberService)를 파라미터로 받는 생성자를 Lombok이 자동으로 생성해줍니다.
// (의존성 주입)
public class MemberController {

    private final MemberService memberService;
    // MemberService에 대한 의존성을 주입받습니다. (생성자 주입 방식)

    // 메인 페이지 또는 목록 페이지를 보여주는 요청 처리
    @GetMapping("/ui/list")
    // HTTP GET 방식으로 "/ui/list" 경로의 요청을 이 메소드와 매핑합니다.
    public String main(){
        // "list"라는 이름의 뷰(View)를 반환합니다.
        // Spring MVC의 ViewResolver가 "list.html" 파일을 찾아 사용자에게 보여줍니다.
        return "list";
        // list.html 파일을 의미합니다.
    }

    // 회원 가입 페이지를 보여주는 요청 처리
    @GetMapping("/register")
    // HTTP GET 방식으로 "/register" 경로의 요청을 이 메소드와 매핑합니다.
    public String register(){
        // "register"라는 이름의 뷰를 반환합니다.
        // ViewResolver가 "register.html" 파일을 찾아 사용자에게 회원 가입 폼을 보여줍니다.
        return "register"; // register.html 파일을 의미합니다.
    }
    //       http://localhost:8080/register


    // 회원 가입 요청(데이터 제출)을 처리
    @PostMapping("/register")
    // HTTP POST 방식으로 "/register" 경로의 요청을 이 메소드와 매핑합니다. (회원 가입 폼 제출 시 호출)
    public String register(Member member){
        // 폼에서 제출된 데이터를 Member 객체로 바인딩하여 받습니다.
        // 주석: "패스워드 암호화" -> memberService.register 내부에서 암호화가 이루어질 것을 시사합니다.
        memberService.register(member); // MemberService의 register 메소드를 호출하여 회원 정보를 등록(저장)합니다.
        // 이 서비스 메소드 내부에서 비밀번호 암호화 등의 처리가 이루어질 것입니다.
        return "redirect:/ui/list";
        // 회원 가입 성공 후 "/ui/list" 경로로 리다이렉트합니다.
        // "redirect:" 접두사는 클라이언트에게 해당 URL로 다시 요청하도록 지시합니다.
        // 주석: "Book 목록여주기(main)" -> /ui/list가 메인 화면 또는 목록 화면임을 나타냅니다.
    }
}

/*
코드 해석
이 MemberController 클래스는 사용자와의 상호작용을 담당하며, 주로 다음 세가지 기능을 수행합니다

1. 메인/목록 페이지 표시 (main 메소드)
사용자가 웹 브라우저에서 /ui/list 경로로 GET 요청을 보내면, 이 메소드가 호출됩니다
"list"  라는 문자열을 반환하여, spring MVC는 list.html 을 찾아 사용자에게 렌더링합니다

2. 회원 가입 페이지 표시 (register GET메소드)
사용자가 /register 경로로 GET 요청을 보내면 (예 : 회원 가입 버튼 클릭), 이 메소드가 호출됩니다
"register" 라는 문자열을 반환하여, Spring MVC는 register.html 템플릿을 찾아 사용자에게 보여줍니다.
이 HTML 파일에는 사용자 정보를 입력할 수 있는 폼이 포함될 것입니다

3. 회원 가입 처리 (register POST 메소드)
사용자가 회원 가입 폼(register.html)에 정보를 입력하고 제출 (Submit) 하면, 브라우저는
/register 경로로 POST 요청을 보냅니다. 이 요청은 메소드에 의해 처리됩니다.

Spring MVC는 HTTP 요청 파라미터(폼 데이터)를 Member 객체의 필드에 자동으로 바인딩합니다

그 후, memberService.register(member)를 호출하여 실제 회원 가입 로직을 수행합니다
MemberService는 주입받은 서비스 계층의 객체로, 여기서 비밀번호 암호화,
데이터베이스에 사용자 정보 저장 등의 중요한 작업이 이루어질 것입니다



 */