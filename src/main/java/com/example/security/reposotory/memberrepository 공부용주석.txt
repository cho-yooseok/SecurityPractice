package com.example.security.repository;
// 해당 인터페이스가 속한 패키지 선언

import com.example.security.entity.Member;
// Member 엔티티 클래스를 가져옴 (사용할 엔티티)
import org.springframework.data.jpa.repository.JpaRepository;
// Spring Data JPA에서 제공하는 JpaRepository 인터페이스를 가져옴
import org.springframework.stereotype.Repository;
// 해당 인터페이스가 리포지토리임을 나타내는 어노테이션

import java.util.Optional;
// NullPointerException 방지를 위해 Optional 클래스를 가져옴

/**
 * Member 엔티티와 상호작용하는 데이터 접근 계층(Repository) 인터페이스.
 * Spring Data JPA의 JpaRepository를 상속받아 기본적인 CRUD(Create, Read, Update, Delete)
 * 기능을 자동으로 제공받으며, 사용자 정의 쿼리 메소드를 추가할 수 있습니다.
 */

@Repository
// 이 어노테이션은 Spring이 이 인터페이스를 컴포넌트 스캔 시 리포지토리로 인식하게 합니다.
public interface MemberRepository extends JpaRepository<Member, Long> {
    // JpaRepository<Member, Long>을 상속받음으로써 Member 엔티티에 대한 기본적인 JPA 기능을 사용할 수 있습니다.
    // Member는 엔티티 타입, Long은 해당 엔티티의 ID(Primary Key) 타입입니다.

    /**
     * 사용자 이름(username)을 기준으로 Member 엔티티를 조회합니다.
     * Spring Data JPA의 쿼리 메소드 기능을 활용하여 메소드 이름만으로 쿼리를 자동 생성합니다.
     * Optional<Member>를 반환하여, 해당 username을 가진 Member가 없을 경우
     * NullPointerException 대신 Optional.empty()를 반환하도록 하여 안전한 코드 작성을 돕습니다.
     *
     * @param username 조회할 회원의 사용자 이름
     * @return 해당 username을 가진 Member 객체를 Optional로 감싸서 반환. 없으면 Optional.empty() 반환.
     */
    public Optional<Member> findByUsername(String username);
}



/*
코드 해설

MemberRepository는 Spring Data JPA를 사용하여
Member 엔티티(데이터베이스 테이블에 매핑되는 객체)의 데이터를 다루는
데이터 접근 계층(Data Access Layer), 즉 리포지토리(Repository) 역할을 합니다

org.springframework.data.jpa.repository.JpaRepository
Spring Data JPA 에서 제공하는 핵심 인터페이스 입니다
이 인터페이스를 상속받음으로써 Member 엔티티에 대한
save(), findById(), findAll(), delete() 등과 같은 기본적인
CRUD(Create, Read, Update, Delete) 메서드들을 별도로 구현하지 않고도 사용할 수 있게 됩니다

public interface MemberRepository extends JpaRepository<Member, Long>
MemberRepository 는 인터페이스로 선언되었으며 JpaRepository를 상속받습니다
<Member, Long> 은 JpaRepository가 다룰 엔티티 타입과 해당 엔티티의 기본 키 (Primary Key) 타입을
지정하는 제네릭(Generic)입니다
여기서 Member는 엔티티 클래스이고, Long은 Member엔티티 ID필드(일반적으로 id)의 타입ㄴ다

public Optional<Member> findByUsername(String username)
이것은 Spring Data JPA의 강력한 기능인 쿼리 메소드(Query Method) 입니다
개발자가 직접 SQL 쿼리를 작성할 필요 없이, 메소드 이름을 규칙에 맞게 작성하면 Spring Data JPA가 자동으로
해당 쿼리를 생성해 줍니다
findByUsername은 "username" 필드를 기준으로 데이터를 찾아라" 라는 의미
String username 은 쿼리 조건으로 사용될 사용자 이름을 나타냅니다
반환타입이 Optional<Member> 인 이유는, username에 해당하는 Member가 데이터베이스에 존재할 수도 있고
존재하지 않을 수도 있기 때문입니다
Optional을 사용하면 null 체크없이 안전하게 결과를 처리할 수 있습니다
 */