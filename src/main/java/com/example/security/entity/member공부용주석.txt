package com.example.security.entity;
// 이 클래스가 속한 패키지를 정의합니다.

import jakarta.persistence.*;
// JPA 관련 어노테이션들을 가져옵니다. (ORM 매핑에 사용)
import lombok.AllArgsConstructor;
// 모든 필드를 인자로 받는 생성자를 Lombok이 자동으로 생성합니다.
import lombok.Getter;
// 모든 필드에 대한 getter 메소드를 Lombok이 자동으로 생성합니다.
import lombok.NoArgsConstructor;
// 인자가 없는 기본 생성자를 Lombok이 자동으로 생성합니다.
import lombok.Setter;
// 모든 필드에 대한 setter 메소드를 Lombok이 자동으로 생성합니다.

import java.util.Set;
// 중복을 허용하지 않는 컬렉션인 Set 인터페이스를 가져옵니다. (주로 다대다 관계에서 사용)

@Setter // Lombok: 모든 필드에 대한 Setter 메소드를 자동으로 생성합니다.
@Getter // Lombok: 모든 필드에 대한 Getter 메소드를 자동으로 생성합니다.
@NoArgsConstructor // Lombok: 파라미터가 없는 기본 생성자를 자동으로 생성합니다. (JPA 스펙상 필요)
@AllArgsConstructor // Lombok: 모든 필드를 파라미터로 받는 생성자를 자동으로 생성합니다.
@Entity // 이 클래스가 JPA 엔티티임을 나타냅니다. 데이터베이스의 테이블과 매핑됩니다.
// 기본적으로 클래스 이름(Member)을 따라 테이블 이름이 "member"로 지정됩니다.
public class Member {
    @Id // 이 필드가 해당 테이블의 기본 키(Primary Key)임을 나타냅니다.
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    // 기본 키 생성 전략을 데이터베이스의 IDENTITY 컬럼에 위임합니다.
    // (예: MySQL의 AUTO_INCREMENT, SQL Server의 IDENTITY)
    private Long id; // 회원의 고유 식별자 (기본 키)

    @Column(unique = true, nullable = false, length = 100)
    // 'username' 필드를 데이터베이스 컬럼에 매핑할 때의 제약조건 설정
    // unique = true: 유일한 값이어야 함 (중복 불가)
    // nullable = false: null 값을 허용하지 않음
    // length = 100: 컬럼의 최대 길이를 100으로 설정
    private String username; // 사용자 아이디
    private String password; // 사용자 비밀번호 (데이터베이스 컬럼명은 'password'로 기본 매핑됨)
    private String name; // 사용자 이름
    private int age; // 사용자 나이
    private String email; // 사용자 이메일

    // Member와 Role 간의 다대다(N:M) 관계 설정
    @ManyToMany(fetch = FetchType.EAGER)
    // 다대다 관계임을 명시합니다.
    // fetch = FetchType.EAGER: Member 엔티티를 조회할 때 연관된 Role 엔티티도 즉시 함께 조회합니다.
    @JoinTable(
        // 다대다 관계를 위한 중간 조인 테이블("member_roles")을 정의합니다.
        name = "member_roles",
        // 조인 테이블의 이름을 "member_roles"로 지정합니다.
        joinColumns = @JoinColumn(name="member_id"),
        // 현재 엔티티(Member)를 참조하는 조인 테이블의 외래 키 컬럼 이름을 "member_id"로 지정합니다.
        // (Member 테이블의 PK를 참조)
        inverseJoinColumns = @JoinColumn(name="role_id")
        // 반대쪽 엔티티(Role)를 참조하는 조인 테이블의 외래 키 컬럼 이름을 "role_id"로 지정합니다.
        // (Role 테이블의 PK를 참조)
    )
    private Set<Role> roles;
    // 해당 회원이 가지고 있는 역할(Role)들의 컬렉션입니다.
    //  Set을 사용하여 중복된 역할을 방지합니다.
    // Role 클래스도 별도의 JPA 엔티티로 정의되어 있어야 합니다.
}

/*
코드 해석
Member 클래스는 애플리케이션의 회원 정보를 나타내는 JPA 엔티티 입니다.
데이터베이스의 member테이블에 해당 정보를 저장하고 관리하는 데 사용됩니다


@Column(...)
username 필드에 대한 데이터베이스 컬럼 설정을 상세하게 지정합니다

unique = ture
username 은 고유해야 합니다 (중복된 아이디 사용 불가)

nullable = false
username 은 반드시 값이 있어야 합니다

length = 100
username의 최대 길이는 100자입니다

다른 필드(password, name, age, email) 는 별도의 @Column 어노테이션이 없으므로,
JPA 필드 이름을 기반으로 기본  컬럼 매핑을 수행합니다



관계 매핑 (Many to Many)
@ManyToMany(fetch = FetchType.EAGER)
Member 엔티티와 Role 엔티티 간의 다대다 관계를 설정합니다.
한 명의 회원은 여러 역할을 가질 수 있고, 하나의 역할은 여러 회원에게 할당될 수 있습니다

fetch = FetchType.EAGER
Meber 엔티티를 조회할 때, 연관된 Role 정보도 즉시 함께 데이터베이스에서 가져오도록 설정합니다
이는 편리할 수 있지만, Role 정보가 항상 필요하지 않은 경우 성능에 영향을 줄 수 있습니다
(FetchType - LAZY) - 필요할 때만 Role 정보를 가져옴

@JoinTable
다대다 관계는 데이터베이스에서 중간 테이블(조인 테이블) 을 통해 표현됩니다
이 어노테이션은 해당 조인 테이블의 정보를 설정합니다

name = "member_roles"
조인테이블의 이름을 member_roles 로 지정합니다

joinColumns = @JoinColumn(name = "member_id")
member_roles 테이블에서 Member 테이블의 id를 참조하는 외래 키 컬럼의 이름을 member_id로 지정합니다

inverseJoinColumns = @JoinColumn(name="role_id")
member_roles 테이블에서 Role 테이블의 기본 키를 참조하는 외래 키 컬럼의 이름을 role_id 로 지정합니다

private Set<Role> roles;
한 회원이 가질 수 있는 여러 Role 객체를 저장하는 컬렉션입니다
Set 을 사용하여 동일한 역할을 중복해서 가지지 않도록 합니다
(이를 위해 Role 클래스도 @Entity로 정의되어 있어야 하며,
적절한 equals()와 hashCode() 메소드가 구현되어 있어야 합니다)


 */

/*
joinColumns
조인테이블에서 현재 엔티티를 참조하는 외래 키 컬럼 정의
예시(Member 엔티티 기준)   @JoinColumn(name="member_id")
joinColumns = @JoinColumn(name="member_id")

inverseJoinColumns
조인테이블에서 반대쪽 엔티티를 참조하는 외래 키 컬럼 정의
예시(Member 엔티티 기준) @JoinColumn(name="role_id")
inverseJoinColumns = @JoinColumn(name="role_id")



[ Member 테이블 ]              [ member_roles 테이블 (조인 테이블) ]                       [ Role 테이블 ]
    +-----------+              +-----------------------------------+                       +----------+
    | member_id (PK)|--------->| member_id (FK)                    |<--------------------  | role_id (PK)|
    | username  |              | role_id   (FK)                    |---------------------> | name     |
    | ...       |              +-----------------------------------+                       | ...      |
    +-----------+                                                                          +----------+


 */