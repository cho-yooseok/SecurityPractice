package com.example.security.entity;
// 이 클래스가 속한 패키지를 정의합니다.

import lombok.Getter;
// Lombok 라이브러리에서 getter 메소드를 자동으로 생성해주는 어노테이션입니다.
import lombok.Setter;
// Lombok 라이브러리에서 setter 메소드를 자동으로 생성해주는 어노테이션입니다.
import org.springframework.security.core.GrantedAuthority;
// Spring Security에서 부여된 권한을 나타내는 인터페이스입니다.
import org.springframework.security.core.authority.SimpleGrantedAuthority;
// GrantedAuthority의 간단한 구현체로, 문자열 형태의 권한을 표현합니다.
import org.springframework.security.core.userdetails.User;
// Spring Security에서 사용자 정보를 나타내는 핵심 클래스입니다.

import java.util.Collection;
// 객체들의 그룹을 나타내는 인터페이스 (여기서는 권한 목록을 담기 위해 사용)
import java.util.Set;
// 중복을 허용하지 않는 컬렉션 (여기서는 사용자의 역할을 담기 위해 사용)
import java.util.stream.Collectors;
// Java Stream API에서 컬렉션을 수집하는 데 사용되는 유틸리티 클래스입니다.

@Setter
@Getter
public class CustomerMember extends User {
    // Spring Security의 User 클래스를 상속받아 사용자 정보를 확장합니다
    private Member member;

    public CustomerMember(Member member) {
        // CustemerMember 객체를 생성하는 생성자입니다
        // 부모클래스인 User의 생성자를 호출합니다
        // User 생성자는 사용자의 이름, 비밀번호, 그리고 권한 목록을 인자로 받습니다
        super(member.getUsername(), member.getPassword(), getAuthorities(member.getRoles()));
        this.member = member;
        // 전달 받은 멤버 객체를 CustomerMember의 member필드에 저장합니다
    }

    // 주어진 역할(Role) 집합을
    // Spring Security 에서 사용할 수 있는 GrantedAuthority 컬렉션으로
    // 변환하는 정적(static) 메소드
    private static Collection<? extends GrantedAuthority> getAuthorities(Set<Role> roles) {
        return roles.stream() // 역할(Role)집합을 스트림으로 변환합니다
        // 각 Role 객체를 "ROLE_" 접두사를 붙인 SimpleGrantedAuthority 객체로 매핑합니다
        // 예 : Role 객체의 이름이 "USER"라면, "Role_USER"라는 권한이 생성됩니다
            .map(role -> new SimpleGrantedAuthority("Role_"+role.getName()))
            .collect(Collectors.toList());
        // 매핑된 GrantedAuthority 객체들을 리스트로 수집하여 반환합니다
    }
}



/*
코드 해석
CustomerMember 클래스는 Spring Security의 User 클래스를 확장하여 사용자 정보를 담는 커스텀 클래스입니다
이는 주로 인증(Authentication) 과정에서 사용자의 권한을 Spring Security 프레임 워크가 이해할 수 있는 형태로
변환하고, 추가적인 회원 정보를 관리하기 위해 사용됩니다

CustomerMember의 목적
이 클래스는 일반적인 회원 정보(Member 엔티티)를 Spring Security가 인증 및 권한 부여 과정에서
사용할 수 있는
org.springframework.security.core.userdetails.User 객체로 변환하는 역할을 합니다
즉, DB에서 조회한 회원 정보를 Spring Security 컨텍스트에 맞게 "포장" 하는 개념입니다

User 클래스 상속
CustomerMember 가 User 클래스를 상속받음으로써, Spring Security의 UserDetailsService에서
이 CustomerMember 객체를 반환하면 Spring Security가 자동으로 사용자의 인증 및 권한 정보를
인식하고 처리할 수 있게 됩니다

Member 필드
private Member member;   필드는 Spring Security의 인증/권한/ 부여 로직과는 별개로, 로그인한 사용자의 실제
Memeber 엔티티의 정보 (예 : 이메일, 네임)를 필요로 할 때 쉽게 접근 할 수 있도록 저장해 둡니다

getAuthorities 메소드
이 메소드의 핵심은 사용자의 Set<Role> (역할 집합) 을 Spring Security의 Collection<?extends GrantedAuthority>
(권한 컬렉션) 으로 변환하는 것입니다

SimpleGrantedAuthority 는 문자열 기반의 권한을 표현하며, Spring Security에서는 일반적으로
"Role_" 접두사 를 권장합니다
예를 들어, Role 객체의 이름이 "ADMIN"이라면,
SimpleGrantedAuthority는 "ROLE_ADMIN" 이 됩니다.
이는 Spring Security의 hasRole() 또는 hasAuthority() 같은 표현식에서 사용될 수 있습니다

Lombok 어노테이션
@Setter와 @Getter 어노테이션은 member 필드에 대한 getter와 setter 메소드를 자동으로 생성해주어
코드를 간결하게 유지합니다



public CustomerMember(Member member) 무슨 뜻이야?
이것은 java에서 생성자(Constructor)를 정의하는 부분

CustomerMember
이 생성자가 속한 클래스의 이름
생성자는 클래스 이름과 동일해야합니다

(Member member)
이 생성자가 인자(argument)로 Mermer 타입의 member라는 변수를 하나 받는다

-> 나는 CustomerMember 클래스 객체를 만들 때 사용되는 공개적인 생성자이며,
이 생성자를 호출할 때는 반드시 Member 타입의 객체하나를 member라는 이름으로 넘겨줘야한다

이 생성자는 주로
Member 엔티티(데이터베이스에서 조회된 회원정보) 를 가지고
CustomerMember 객체(spring security에서 사용할 수 있는 정보 객체)를 초기화 하는데 사용됩니다

Member와 member의 차이
Member (대문자 M으로 시작)
클래스 또는 인터페이스의 이름입니다

member (소문자 m으로 시작)
이것은 Member 클래스의 인스턴스(객체)를 참조하는 변수 이름 입니다
CustomerMember클래스 내부에서
private Member member; 처럼 선언된 필드이거나,
생성자의 인자로 (Member member) 처럼 사용되는 지역변수 입니다

예시
Member 클래스이름
Member myMember = new Member();
// myMember는   Member클래스의 인스턴스를 참조하는 변수이름

Member : 설계도 (클래스)
member : 설계도로 만들어진 실제 물건 (객체의 변수이름)

super란?
super키워드는 java에서 부모클래스(상위클래스)를 참조할 때 사용되는 키워드

CustomerMember 클래스는 org.springframework.security.core.userdetails.User 클래스를
상속(extends User)받고 있습니다
즉, User가 부모클래스이고, CustomerMember가 자식 클래스입니다

생성자에서 super(...)을 호출하는 것은 다음과 같은 의미를 가집니다
부모 클래스의 생성자 호출 :
자식 클래스의 생성자가 실행될 때, 가장 먼저 부모 클래스의 생성자를 호출하여
부모 클래스 부분을 초기화 해야합니다
super(member.getUsername(), member.getPassword(), getAuthorities(  member.getRoles()  )   );
이 코드는  CustomerMember의 부모 클래스인 User의 생성자를 호출하는것입니다

왜 super()를 호출해야 하는가
자식 클래스가 생성될 때, 부모 클래스의 멤버 변수들도 함께 메모리에 할당되고 초기화 되어야합니다
super() 호출을 통해 부모 클래스의 생성자가 실행되면서 부모 클래스의 초기화 로직이 수행되고,
필요한 필드들이 설정됩니다.
만약
자식 클래스의 생성자에서 명시적으로  super()을 호출하지 않으면, 컴파일러가 자동으로
인자없는 super()를 첫줄에 삽입합니다
하지만
부모 클래스에 인자 없는 생성자가 없다면 컴파일 오류가 발생합니다

요약하자면
super는 "내 부모"를 의미하며
특히
super(...) 은 "내 부모 클래스의 이 생성자를 호출해줘" 라는 뜻입니다



getAuthorities(member.getRoles())

getAuthorities
는 메소드 이름입니다
이름 그대로 권한들을 가져온다(혹은 생성한다) 는 의미를 가지고 있습니다
이 메소드는 사용자의 역할(Role)정보를
Spring Security가 이해할 수 있는 권한(Authority) 형태로 변환하는 역할을 수행합니다

member.getRoles() 는 무슨 뜻임?
member라는 객체가 가지고 있는 getRoles() 메소드를 호출하는 것입니다

getRoles()
Member클래스 내부에 정의되어 있는 메소드
이 메소드는 해당 Member 객체에 할당된  역할(Role)들의 집합(Set) 을 반환합니다
일반적으로 Member엔티티는 여러 Role을 가질 수 있도록 다대다(Many-to-many)관계로
설정되어있을 것입니다

반환 값 예시
만약 특정 member가 "관리자"와 "사용자" 역할을 가지고 있다면
member.getRoles() 는
Set<Role>의 형태로   [Role(name="ADMIN"), Role(name="USER")] 와 같은 데이터를
반환할 것입니다


getAuthories 메소드 상세 해설 및 문법 설명
1. 메소드 선언부 :
private static Collection<? extends GrantedAuthority> getAuthorities(Set<Role> roles)

static
정적(static) 키워드 입니다. 이 메소드가 특정 CustomerMember 객체에 종속되지 않고,
CustomerMember 클래스 자체에 속하는 메소드임을 의미합니다

static 메소드는 객체 생성없이 클래스명.메소드명() 형태로 직접 호출할 수 있습니다
(   예 : CustomerMember.getAuthorities(...)   )

여기서는
CustomerMember 생성자 내부에서 사용되기 때문에, 객체가 완전히 초기화 되기 전에
호출될 수 있도록 static 으로 선언되었습니다
static 메소드 내부에서는
static멤버 (필드, 메소드) 만 직접 접근할 수 있습니다

Collection<? extends GrantedAuthority>
이 메소드는 반환(return) 타입입니다
Collection
java 컬렉션 프레임워크의 최상위 인터페이스중 하나로,
객체들의 그룹을 나타냅니다
여기서는
여러 개의 권한 객체를 담을 수 있는 형태 (예 List, Set)
를 반환함을 의미합니다



Collection<? extends GrantedAuthority>
<? extends GrantedAuthority>
와일드카드 Wildcard 를 사용한 제네렉 generic 입니다
GrantedAuthority 인터페이스를 구현하거나 상속받는 모든 타입의 객체를
이 컬렉션에 담을 수 있다는 의미입니다
SimpleGrantedAuthority  는
GrantedAuthority를 구현하므로
여기에 해당합니다
이는 유연성을 제공하며
Spring Security에서 GrantedAuthority 타입을 요구하기 때문입니다

(Set<Role> roles)
이 메소드의 매개변수(parameter) 입니다
Set<Role>
Role 타입의 객체들을 담는
Set 컬렉션을  인자로 받겠다는 의미입니다.
Set은 중복을 허용하지 않는 컬렉션입니다

roles 매개변수의 이름입니다
메소드 내부에서
이 Set컬렉션을 roles 라는 이름으로 참조하여 사용합니다


2. 메소드 본문 (stream API 활용)
return roles.stream()
역할(Role) 집합을 스트림으로 변환합니다
    .map(role -> new SimpleGrantedAuthority("ROLE_"+role.getName()))
    .collect(Collectors.toList());


    이 부분은 Java8부터 도입된 스트림(Stream) API 를 사용하여
    컬렉션을 처리하는 전형적인 예시입니다
    스트림은 선언적이고 함수형 프로그래밍 스타일로
    컬렉션 데이터를 처리할 수 있게 해줍니다


    roles.stream()
    roles(Set<Role> 타입) 컬렉션에 stream() 메소드를 호출하여 스트림을 생성합니다
    스트림은 데이터를 순차적으로 생성할 수 있는 파이프라인을 구축하는 시작점입니다

    Collection.stream()

    .map(role -> new SimpleGrantedAuthority("ROLE_"+role.getName()))
    중간 연산 (Intermediate Operation) 중 하나인 map() 메소드입니다
    스트림의 각 요소를 다른 형태로 변환(매핑) 합니다

    role -> new SimpleGrantedAuthority("ROLE_"+role.getName())
    이것은 람다 표현식 입니다
    (Lambda Expression)

    문법
    (parameter) -> expression  또는
    (parameter) -> statements; (statement 문 구문 문장 명령문)

    여기서 role은 스트림에서 나오는 각 Role 객체를 나타내는 임시 변수 입니다

    -> 는 람다본문(오른쪽)이 role을 입력을 받아 실행될 것임을 나타냅니다

    new SimpleGrantedAuthority("ROLE_"+role.getName())
    role 객체에서
    getName()메소드를 호출하여 Role의 이름을 가져옵니다
    (예 "ADMIN" "USER")
    그 이름 앞에 "ROLE_"  문자열을 붙여 새로운 SimpleGrantedAuthority 객체를 생성합니다
    이 변환된 SimpleGrantedAuthority 객체가 새로운 스트림의 요소가 됩니다

    .collect(Collectors.toList())
    종단 연산(Terminal Operation) 중 하나인 collect() 메소드입니다
    스트림의 모든 요소를 처리 한 후,
    그 결과들을 원하는 형태의 컬렉션으로
    수집(모아서 반환) 합니다

    Collectors.toList()
    Collectors 유틸리티 클래스에서 제공하는
    정적 메소드입니다
    map 연산의 결과를
    List 컬렉션으로 수집하라는 지시입니다

    최종적으로 이 메소드는
    List<SimpleGrantedAuthority> 또는
    List<? extends GrantedAuthority>  형태의 객체를 반환하게 됩니다
*/