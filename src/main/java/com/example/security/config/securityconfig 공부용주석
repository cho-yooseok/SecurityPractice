package com.example.security.config;

import org.springframework.context.annotation.Bean; // 스프링 컨테이너가 관리하는 빈을 정의할 때 사용
import org.springframework.context.annotation.Configuration;
// 이 클래스가 스프링의 설정 정보를 담고 있음을 나타냄
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
// HTTP 요청에 대한 보안설정을 구성합니다
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
//스프링 시큐리티의 웹 보안 기능을 활성화합니다
import org.springframework.security.crypto.bcrypt.BCrypt;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
// 비밀번호 암호화에 사용될 BCryptPasswordEncoder를 가져옵니다
import org.springframework.security.web.SecurityFilterChain;
// HTTP 요청에 적용될 보안 필터 체인을 정의합니다
import org.springframework.security.web.util.matcher.AntPathRequestMatcher;
// 특정 경로 및 HTTP메소드에 대한 요청을 매칭할 때 사용합니다

@Configuration // 이 클래스를 Spring의 설정파일로 지정합니다
               // @Configuration이 붙은 클래스는 내부에 @Bean 애너테이션이 붙은 메서드를 통해
               // 스프링 컨테이너에 등록할 객체(bean)을 정의합니다
@EnableWebSecurity // Spring Security의 웹 보안 기능을 활성화합니다
public class SecurityConfig {

    // 비밀번호 암호화 방식을 정의하는 Bean
    @Bean // 이 메소드가 반환하는 객체를 Spring컨테이너의 Bean으로 등록합니다
    public BCryptPasswordEncoder passwordEncoder(){
        // BCrypt 해싱 알고리즘을 사용하는 PasswordEncoder를 생성하여 반환합니다
        // 회원가입 시 비밀번호를 암호화하고, 로그인 시 입력된 비밀번호와
        // 저장된 암호화된 비밀번호를 비교하는 데 사용됩니다
        return new BCryptPasswordEncoder();
    }/*
    BCryptPasswordEncoder란? 비 크립트 패스워드 인코더란?
    BCryptPasswordEncoder 는 BCrypt 해시 함수를 사용해  비밀번호를 암호화(해싱)하는 클래스입니다
    비밀번호를 안전하게 저장하고, 로그인 시 비교하는데 사용됩니다*/


    // 실제 보안 설정을 담당하는 SecurityFilterChain Bean
    @Bean // 이 메소드가 반환하는 객체를 Spring 컨테이너의 Bean으로 등록합니다
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        // HttpSecurity : HTTP 요청에 대한 보안 설정을 구성하는 핵심 클래스입니다
        // 인증/인가 규칙, 로그인/로그아웃 처리, CSRF 보호 등을 설정할 수 있습니다

        // 인증여부에 따른 요청을 허용, 불허용, 권한에 따른 요청을 허용, 불허용  -> HttpSecurity의 역할
        http
            .authorizeHttpRequests(authz -> authz
                //HTTP 요청에 대한 인가 규칙을 설정합니다
                .requestMatchers("/api/**").authenticated()
                // "/api/**" 패턴의 모든 요청은 인증된 사용자만 접근가능합니다
                .requestMatchers("/book/**").authenticated()
                // "/book/**" 패턴의 모든 요청은 인증된 사용자만 접근가능합니다
                .anyRequest().permitAll()
                // 위에서 지정한 경로 외의 모든 요청은 인증 여부와 관계없이 모든 시용자가 접근가능합니다
            )
            .formLogin(form -> form
                    // 폼 기반 로그인 설정을 구성합니다
                    .loginPage("/ui/list")
                    // 사용자 정의 로그인 페이지 경로를 "ui/list" 로 지정합니다
                    // 인증되지 않은 사용자가 보호된 리소스에 접근하려 하면 이 페이지로 리다이렉트 됩니다
                    .loginProcessingUrl("/login")
                    // 로그인 폼 데이터를 처리할 URL을 "/login"으로 지정합니다
                    // (Spring Security가 이 URL로 오는 POST 요청을 가로채 로그인을 처리합니다)
                    .defaultSuccessUrl("/ui/list", true)
                    // 로그인 성공 후 기본적으로 리다이렉트될 url을
                    // "/ui/list"로 지정합니다.
                    // 'true'는 항상 이 url로 이동하도록 강제합니다
            )
            .logout(logout -> logout
                // 로그아웃 설정을 구성합니다
                .logoutUrl("/logout")
                // 로그아웃을 처리할 URL을 "/logout"으로 지정합니다
                // (기본적으로 post 요청이지만 아래에서 get으로 변경)
                .logoutSuccessUrl("/ui/list")
                // 로그아웃 성공 후 리다이렉트될 url을 "/ui/list"로 지정합니다
                .logoutRequestMatcher(new AntPathRequestMatcher("/logout", "GET"))
                //  "/logout" URL에 대한 GET요청으로 로그아웃을 수행하도록 설정합니다 (기본값인 post 대신 get사용)
                .clearAuthentication(true)
                // 로그아웃 시 SecurityContextHolder에서 현재 사용자의 인증 정보를 제거합니다
                .deleteCookies("JSESSIONID")
                // 로그아웃 시 "JSESSIONID" 쿠키를 삭제합니다(세션 쿠키 삭제)
                .invalidateHttpSession(true)
                // 로그아웃 시 http 세션을 무효화합니다
            );

        return http.build();
        // 설정된 HttpSecurity 객체를 기반으로 SecurityFilterChain을 생성하여 반환합니다
    }
}

/*
코드 해석
이 SecurityConfig 클래스는 Spring Security를 사용하여 애플리케이션의 보안 규칙을 정의합니다
주요기능은 다음과 같습니다

1. 비밀번호 암호화 설정
passwordEncoder() 메소드는 BCryptPasswordEncoder 를 Bean으로 등록합니다
이는 애플리케이션에서 비밀번호를 안전하게 저장하고 검증하는데 사용됩니다
BCrypt는 현재 강력한 해시함수 중 하나로 간주됩니다



2.HTTP 요청 보안 설정(securityFilterChain 메소드)
인가 규칙(Authorization)
/api/**  와 /book/**  경로로 시작하는 모든 URL 요청은 인증된 사용자(로그인한 사용자)만
접근할 수 있도록 설정합니다

그 외의 모든 요청(anyRequest())은 인증 상태와 관계없이
모든 사용자에게 허용(permitAll()) 됩니다

폼 기반 로그인(Form Login)
사용자 정의 로그인 페이지는 /ui/list 경로로 설정됩니다.
즉, 로그인하지 않은 사용자가 보호된 페이지에 접근하려고 하면 이 페이지로 이동합니다

로그인 처리는 /login URL 에서 수행됩니다. 사용자가 아이디와 비밀번호를 입력하고 제출하면
Spring Security 가 이 요청을 받아 인증을 시도합니다

로그인에 성공하면 사용자는 /ui/list 페이지로 리디렉션됩니다.
true 옵션은 사용자가 이전에 다른 페이지를 방문하려 했더라도 항상 /ui/list 로 이동하도록 합니다

http://localhost:8080/ui/list


로그아웃
로그아웃은 /logout URL에 GET요청을 보내는 것으로 트리거됩니다
(기본적으로 POST 요청이지만, AntPathRequestMatcher를 사용하여 GET으로 변경했습니다)

로그아웃에 성공하면 사용자는 /ui/list 페이지로 리디렉션 됩니다

로그아웃 시, 현재 사용자의 인증 정보가 제거되고 (clearAuthentication(true)),
 세션쿠키("JSESSIONID")가 삭제되며 ( deleteCookies("JSESSIONID")),
 HTTP 세션이 무효화됩니다(invalidateHttpSession(true))
 이를 통해 사용자의 세션이 완전히 종료됩니다

 @EnableWebSecurity 어노테이션
 이 어노테이션은 Spring Security의 웹 보안 지원을 활성화하고,
 Spring MVC 통합을 제공합니다
 Spring Boot 애플리케이션에서는 특정 의존성이 존재할 경우
 자동 설정에 의해 암묵적으로 활성화될 수 있어
 명시적으로 선언하지 않아도 되는 경우가 있습니다

 // 결론적으로, 이 설정은 특정경로 (api, book) 에 대한 접근을
 인증된 사용자로 제한하고, 폼 기반의 로그인 및 로그아웃 기능을 제공하며,
 비밀번호는 BCrypt로 암호화하여 관리하는 기본적인 웹 보안 구성을 정의하고 있습니다
 */
